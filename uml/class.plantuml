@startuml
allowmixing

abstract User {
  + Id id
  + String name
  + String description
}

class Applicant

class Employer

class UserManager {
  + User create(name: String, desc: String)
  + void editName(userId: Id, name: String)
  + void editDescription(userId: Id, desc: String)
  + void delete(userId: Id)
  + User getUser(userId: Id)
}

class VacancyController {
  + void createVacancy(name: String, desc: String, tags: List<Tag>)
  + void editVacancy(id: Id, name: String, desc: String, tags: List<Tag>)
  + void deleteVacancy(id: Id)
  + List<Vacancy> getVacancies(employerId: Id)
}

class ResponseController {
  + void respond(vacancyId: Id)
  + List<VacancyResponse> getRespondees()
  + List<VacancyResponse> getRespondees(vacancyId: Id)
  + Option<VacancyResponse> getRespondees(vacancyId: Id, applicantId: Id)
}

class Vacancy {
  + Id id
  + String name
  + String description
  + bool isClosed
}

class VacancyResponse {
  + Id vacancyId
  + Id respondeeId
}

enum ResponseStatus {
  Approved
  Denied
  NotSeen
}

class Tag {
  + String name
}

class SearchEngine {
  List<Id> searchEmployers(query: String)
  List<Id> searchVacancies(query: String)
  void applyTagFilter(tags: List<Tag>)
  void applyEmployerFilter(employerIds: List<Id>)
}

interface Repository<T> {
  + T get(id: Id)
  + Id create(thing: T)
  + bool update(id: Id, newState: T)
  + bool delete(id: Id)
}

class VacancyRepository {
  - DBConn connection
}

class UserRepository {
  - DBConn connection
}

class TagRepository {
  - DBConn connection
}

class ResponseRepository {
  - DBConn connection
}

User <|-- Employer
User <|-- Applicant

Employer <-. VacancyController
Employer <-. ResponseController
Applicant <-. SearchEngine
Applicant <-. ResponseController

User <-. UserManager

Vacancy <-- Tag

VacancyResponse *- ResponseStatus

VacancyRepository --|> Repository:<T::Vacancy>
UserRepository --|> Repository:<T::User>
TagRepository --|> Repository:<T::Tag>
ResponseRepository --|> Repository:<T::VacancyResponse>

UserManager --> UserRepository

VacancyController --> VacancyRepository
VacancyController --> TagRepository
VacancyController -.-> Vacancy

SearchEngine --> VacancyRepository
SearchEngine --> UserRepository
SearchEngine --> TagRepository

ResponseController --> VacancyRepository
ResponseController --> ResponseRepository
ResponseController -.-> Vacancy
ResponseController -.-> VacancyResponse

SearchEngine -.-> Vacancy

@enduml
